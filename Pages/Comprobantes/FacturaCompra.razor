@page "/comprobantes/facturacompra"
@inject IProveedoresServicio _proveedoresServicio


<h3>FacturaVenta</h3>

<div class="mb-3 row">
    <label class="col-sm-2 col-form-label">Fecha</label>
    <div class="col-sm-10">
        <input type="date" class="form-control" @bind-value="@factura.Fecha">
    </div>

    @if (!BuscarProveedor)
    {
        <label class="col-sm-2 col-form-label">Proveedor</label>
        <div class="col-sm-10">
            <div class="row">
                <div class="col-2">
                    <input type="text"
                       class="form-control"
                       value="@factura.Provee"
                       @onchange="facturaProveedoresOnChange" />
                </div>
                <div class="col-2">
                    <button class="btn btn-secondary" @onclick="MostrarComboProveedor">Buscar</button>
                </div>
                <div class="col-8">
                    <label class="col-form-label">@factura.NombreProveedor</label>
                </div>
            </div>
        </div>
    }
    else
    {
        <label class="col-sm-2 col-form-label">Cliente</label>
        <div class="col-sm-10">

            <select class="form-select" @onchange="OnChangeComboProveedor">
                @foreach (var Op in factura.proveedores)
                {
                    @if (factura.Provee == Op.Codigo)
                    {
                        <option selected value="@Op.Codigo">@Op.Nombre</option>
                    }
                    else
                    {
                        <option value="@Op.Codigo">@Op.Nombre</option>
                    }
                }
            </select>
        </div>

    }



</div>


@code {
    private FacturaCompraDto factura { get; set; } = new FacturaCompraDto();
    private bool BuscarProveedor { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        factura.Fecha = DateTime.Now.Date;
        factura.proveedores = await _proveedoresServicio.CargarCombo();
    }

    private async Task MostrarComboProveedor()
    {
        await Task.Delay(1);
        BuscarProveedor = true;
    }

    private async Task OnChangeComboProveedor(ChangeEventArgs e)
    {
        factura.Provee = e.Value.ToString();
        var Cl = await _proveedoresServicio.Leer(factura.Provee);
        if (Cl != null)
            factura.NombreProveedor = Cl.Nombre;
        else
            factura.NombreProveedor = "";
        BuscarProveedor = false;

    }
    private async Task facturaProveedoresOnChange(ChangeEventArgs args)
    {

        if (args.Value == null)
            factura.Provee = "";
        else
            factura.Provee = FormatoCodigo(args.Value.ToString());

        if (factura.Provee != "")
        {
            var X = await _proveedoresServicio.Leer(factura.Provee);
            if (X != null)
                factura.NombreProveedor = X.Nombre;
            else
                factura.NombreProveedor = "";

        }
    }

    private string FormatoCodigo(string? Valor)
    {
        if (Valor == null) Valor = "";

        string respuesta = "";

        int X = int.Parse(Valor);
        respuesta = X.ToString("D4");
        return respuesta;
    }


}
